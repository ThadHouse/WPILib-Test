apply plugin: 'maven-publish'
apply plugin: 'edu.wpi.first.wpilib.versioning.WPILibVersioningPlugin'

if (!hasProperty('releaseType')) {
    WPILibVersion {
        releaseType = 'dev'
    }
}

def pubVersion = ''
if (project.hasProperty("publishVersion")) {
    pubVersion = project.publishVersion
} else {
    pubVersion = WPILibVersion.version
}

if (pubVersion == null || pubVersion == "") {
  pubVersion = "424242-SNAPSHOT"
}

def baseArtifactId = 'wpilibc'
def artifactGroupId = 'edu.wpi.first.wpilibc'

task cppSourcesZip(type: Zip) {
    destinationDir = project.buildDir
    classifier = "sources"

    from(licenseFile) {
        into '/'
    }

    from('src/main/native/cpp') {
        into '/'
    }
}

task cppHeadersZip(type: Zip) {
    destinationDir = project.buildDir
    classifier = "headers"

    from(licenseFile) {
        into '/'
    }

    from('src/main/native/include') {
        into '/'
    }
}

model {
    publishing {
        def wpilibCTaskList = createComponentZipTasks($.components, 'wpilibc', 'zipcpp', Zip, project, includeStandardZipFormat)

        $.components.each {
            if (it in NativeLibrarySpec && it.name == 'wpilibc') {
                def libs = []
                it.binaries.each {
                    if (getClassifier(it) == 'linuxathena' && it in SharedLibraryBinarySpec) {
                        it.libs.each {
                            it.linkFiles.each {
                                libs.add it.name
                            }
                            
                        }
                        libs.add it.sharedLibraryFile.name
                    }
                }
                // TODO: Generate wpi linker file
                libs.each {
                    println it
                }
            }
        }

        publications {
            cpp(MavenPublication) {
                wpilibCTaskList.each {
                    artifact it
                }
                artifact cppHeadersZip
                artifact cppSourcesZip

                artifactId = baseArtifactId
                groupId artifactGroupId
                version pubVersion
            }
        }
    }
}