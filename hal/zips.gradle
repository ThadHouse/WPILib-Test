ext.licenseFile = new File("$rootDir/license.txt")

task cppSourcesZip(type: Zip) {
    destinationDir = project.buildDir
    classifier = "sources"

    from(licenseFile) {
        into '/'
    }

    from('src/main/native/athena') {
        into '/athena'
    }

    from('src/main/native/sim') {
        into '/sim'
    }

    from('src/main/native/shared') {
        into '/shared'
    }
}

task cppHeadersZip(type: Zip) {
    destinationDir = project.buildDir
    classifier = "headers"

    from(licenseFile) {
        into '/'
    }

    from('src/main/native/include') {
        into '/'
    }
}

model {
    publishing {
        def halAthenaTaskList = createComponentZipTasks($.components, 'halAthena', 'zipcpp', Zip, project, includeStandardZipFormat)

        def halSimTaskList = createComponentZipTasks($.components, 'halSim', 'zipcpp', Zip, project, includeStandardZipFormat)

        def halSimStaticDepsTaskList = createComponentZipTasks($.components, 'halSimStaticDeps', 'zipcpp', Zip, project, includeStandardZipFormat)

        publications {
            cpp(MavenPublication) {
                halAthenaTaskList.each {
                    artifact it
                }
                halSimTaskList.each {
                    artifact it
                }
                artifact cppHeadersZip
                artifact cppSourcesZip

                artifactId = baseArtifactId
                groupId artifactGroupId
                version pubVersion
            }
            if (project.hasProperty('buildHalStaticDeps')) {
                cppStaticDeps(MavenPublication) {
                    halSimStaticDepsTaskList.each {
                        artifact it
                    }

                    artifactId = baseArtifactId + 'StaticDeps'
                    groupId artifactGroupId
                    version pubVersion
                }
            }
        }
    }
}