apply plugin: 'cpp'
apply plugin: 'visual-studio'
apply plugin: 'edu.wpi.first.native-utils'
apply plugin: 'edu.wpi.first.dependency-utils'
apply plugin: 'edu.wpi.first.publish-utils'

apply from: '../config.gradle'


model {
    dependencyConfigs {
        wpiutil(DependencyConfig) {
            groupId = 'edu.wpi.first.wpiutil'
            artifactId = 'wpiutil-cpp'
            headerClassifier = 'headers'
            ext = 'zip'
            version = '+'
            sharedConfigs = [ halAthena: [ 'linux:athena' ] ]
            staticConfigs = [ halSim: [ 'windows:x86', 'windows:x86-64', 'linux:x86', 'linux:x86-64', 'osx:x86', 'osx:x86-64',
                                        'linux:raspbian', 'linux:armhf', 'linux:armv8', 'linux:arm' ] ]
        }
    }
}

model {
    components {
        halAthena(NativeLibrarySpec) {
            binaries.all {
                tasks.withType(CppCompile) {
                    cppCompiler.args "-DATHENA"
                }
                project(':ni-libraries').addNiLibrariesToLinker(it)
            }
            sources {
                cpp {
                    source {
                        srcDirs = [ '/src/hal/cpp/shared', '/src/hal/cpp/athena' ]
                        includes = ["**/*.cpp"]
                    }
                    exportedHeaders {
                        srcDirs = ["src/hal/headers"]
                    }

                }
            }
        }
    }
}

model {
    components {
        halSim(NativeLibrarySpec) {
          sources {
                cpp {
                    source {
                        srcDirs = [ '/src/hal/cpp/shared', '/src/hal/cpp/sim' ]
                        includes = ["**/*.cpp"]
                    }
                    exportedHeaders {
                        srcDirs = ["src/hal/headers"]
                    }
                }
            }
        }
    }
}

task cppSourcesZip(type: Zip) {
    destinationDir = project.buildDir
    classifier = "sources"

    from('src/hal/cpp') {
        into '/'
    }
}

task cppHeadersZip(type: Zip) {
    destinationDir = project.buildDir
    classifier = "headers"

    from('src/hal/headers') {
        into '/'
    }
}

apply from: 'publish.gradle'