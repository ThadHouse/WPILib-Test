apply plugin: 'cpp'
apply plugin: 'google-test'
apply plugin: 'visual-studio'
apply plugin: 'edu.wpi.first.native-utils'
apply plugin: 'edu.wpi.first.dependency-utils'
apply plugin: 'edu.wpi.first.exports-utils'
apply plugin: 'edu.wpi.first.publish-utils'

apply from: '../config.gradle'

model {
    dependencyConfigs {
        wpiutil(DependencyConfig) {
            groupId = 'edu.wpi.first.wpiutil'
            artifactId = 'wpiutil-cpp'
            headerClassifier = 'headers'
            ext = 'zip'
            version = '+'
            sharedConfigs = [ halAthena: [], halSim: [], halSimTest: [] ]
        }
    }
}

model {
    exportsConfigs {
        halSim(ExportsConfig) {
            x86ExcludeSymbols = [ '_CT??_R0?AV_System_error', '_CT??_R0?AVexception', '_CT??_R0?AVfailure',
                                  '_CT??_R0?AVbad_cast',
                                  '_CT??_R0?AVruntime_error', '_CT??_R0?AVsystem_error', '_CTA5?AVfailure',
                                  '_TI5?AVfailure' ]
            x64ExcludeSymbols = [ '_CT??_R0?AV_System_error', '_CT??_R0?AVexception', '_CT??_R0?AVfailure',
                                  '_CT??_R0?AVbad_cast',
                                  '_CT??_R0?AVruntime_error', '_CT??_R0?AVsystem_error', '_CTA5?AVfailure',
                                  '_TI5?AVfailure' ]
        }
    }
}

model {
    components {
        halAthena(NativeLibrarySpec) {
            baseName = 'wpiHal'
            binaries.all { binary->
                if (binary.targetPlatform.architecture.name == 'athena') {
                    tasks.withType(CppCompile) {
                        cppCompiler.args "-DCONFIG_ATHENA"
                    }
                    project(':ni-libraries').addNiLibrariesToLinker(binary)
                }
            }
            sources {
                cpp {
                    source {
                        srcDirs = [ '/src/hal/cpp/shared', '/src/hal/cpp/athena' ]
                        includes = ["**/*.cpp"]
                    }
                    exportedHeaders {
                        srcDirs = ["src/hal/headers"]
                    }
                }
            }
        }
    }
}

model {
    components {
        halSim(NativeLibrarySpec) {
            baseName = 'wpiHal'
            sources {
                cpp {
                    source {
                        srcDirs = [ '/src/hal/cpp/shared', '/src/hal/cpp/sim' ]
                        includes = ["**/*.cpp"]
                    }
                    exportedHeaders {
                        srcDirs = ["src/hal/headers"]
                    }
                }
            }
        }
    }
    binaries {
        withType(GoogleTestTestSuiteBinarySpec) {
            lib project: ':gmock', library: 'gmock', linkage: 'static'
            lib library: 'halSim', linkage: 'shared'
        }
    }
}

task cppSourcesZip(type: Zip) {
    destinationDir = project.buildDir
    classifier = "sources"

    from('src/hal/cpp') {
        into '/'
    }
}

task cppHeadersZip(type: Zip) {
    destinationDir = project.buildDir
    classifier = "headers"

    from('src/hal/headers') {
        into '/'
    }
}

apply from: 'publish.gradle'